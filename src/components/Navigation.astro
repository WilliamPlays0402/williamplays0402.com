---

const currentPath = Astro.url.pathname;

const navigation = [
  { name: 'Home', href: '/' },
  { name: 'About', href: '/about' },
  { name: 'Contact', href: '/contact' },
  { name: 'Blog', href: '/blog' },
];
---

<nav class="bg-white dark:bg-gray-800 shadow-sm border-b border-gray-200 dark:border-gray-700 sticky top-0 z-50">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex justify-between h-16">
      <div class="flex items-center">
        <a href="/" class="text-2xl font-bold text-blue-600 dark:text-blue-400 hover:text-purple-600 dark:hover:text-purple-400 transition-colors">
          William Plays0402
        </a>
      </div>
      
      <div class="hidden md:flex items-center space-x-8">
        {navigation.map((item) => (
          <a
            href={item.href}
            class={`px-3 py-2 rounded-md text-sm font-medium transition-colors ${
              currentPath === item.href
                ? 'text-blue-600 dark:text-blue-400 bg-blue-50 dark:bg-blue-900/20'
                : 'text-gray-700 dark:text-gray-300 hover:text-purple-600 dark:hover:text-purple-400 hover:bg-gray-50 dark:hover:bg-gray-700'
            }`}
          >
            {item.name}
          </a>
        ))}
      </div>

      <!-- Mobile menu button -->
      <div class="md:hidden flex items-center space-x-2">
        <button
          type="button"
          class="mobile-menu-button text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 focus:outline-none focus:text-blue-600 dark:focus:text-blue-400 p-2 -m-2 touch-manipulation"
          aria-label="Toggle mobile menu"
        >
          <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
          </svg>
        </button>
      </div>
    </div>
  </div>

  <!-- Mobile menu -->
  <div class="mobile-menu hidden md:hidden">
    <div class="px-2 pt-2 pb-3 space-y-1 bg-white dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700">
      {navigation.map((item) => (
        <a
          href={item.href}
          class={`block px-3 py-2 rounded-md text-base font-medium transition-colors ${
            currentPath === item.href
              ? 'text-blue-600 dark:text-blue-400 bg-blue-50 dark:bg-blue-900/20'
              : 'text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 hover:bg-gray-50 dark:hover:bg-gray-700'
          }`}
        >
          {item.name}
        </a>
      ))}
    </div>
  </div>
</nav>

<script>
  function initMobileMenu() {
    const mobileMenuButton = document.querySelector('.mobile-menu-button') as HTMLElement | null;
    const mobileMenu = document.querySelector('.mobile-menu') as HTMLElement | null;
    
    if (!mobileMenuButton || !mobileMenu) return;
    
    // Clear any existing listeners by cloning the button
    const newButton = mobileMenuButton.cloneNode(true) as HTMLElement;
    mobileMenuButton.parentNode?.replaceChild(newButton, mobileMenuButton);
    
    // Function to toggle menu
    function toggleMenu(e: Event) {
      e.preventDefault();
      e.stopPropagation();
      if (mobileMenu) {
        mobileMenu.classList.toggle('hidden');
      }
    }
    
    // Add event listeners for both touch and click
    newButton.addEventListener('click', toggleMenu);
    newButton.addEventListener('touchend', toggleMenu);
    
    // Close menu when clicking/touching outside
    function closeMenu(e: Event) {
      const target = e.target as HTMLElement | null;
      if (
        target &&
        (!mobileMenu || !mobileMenu.contains(target)) &&
        !newButton.contains(target)
      ) {
        mobileMenu && mobileMenu.classList.add('hidden');
      }
    }
    
    document.addEventListener('click', closeMenu);
    document.addEventListener('touchend', closeMenu);
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initMobileMenu);
  } else {
    initMobileMenu();
  }
  
  // Fallback for window load
  window.addEventListener('load', initMobileMenu);
</script>
